global:
  environment: testnet
  imageRegistry: ghcr.io/agi/protocol
  chainId: 84532
  rpc:
    primary: https://sepolia.gateway.rpc
    fallback: https://backup.rpc
  contracts:
    entryPoint: "0x0000000000000000000000000000000000000000"
    paymaster: "0x0000000000000000000000000000000000000000"
    bundler: "0x0000000000000000000000000000000000000000"
    attester: "0x0000000000000000000000000000000000000000"
  eas:
    schemaUid: "0x0000000000000000000000000000000000000000000000000000000000000000"
  cors:
    allowOrigins:
      - https://dashboard.example.com
      - https://operators.example.com
    allowMethods: [GET, POST, OPTIONS]
    allowHeaders: [Authorization, Content-Type, X-Requested-With]
  ratelimits:
    enabled: true
    burst: 50
    requestsPerSecond: 20
    redisDsn: redis://ratelimits:6379/0
  observability:
    prometheusScrape: true
    serviceMonitorNamespace: monitoring
  secrets:
    kmsKeyId: projects/example/locations/global/keyRings/aa/cryptoKeys/runtime
    secretProviderClass: aws-kms-secrets
  autoscaling:
    defaultTargetCPUUtilizationPercentage: 70

orchestrator:
  replicaCount: 2
  image:
    repository: orchestrator
    tag: v0.5.0
    digest: sha256:0000000000000000000000000000000000000000000000000000000000000000
  service:
    port: 8080
  env:
    MAX_REQUEST_BODY: "2m"
    FEATURE_FLAGS: "pause-switch,gas-topup"
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 512Mi

bundler:
  replicaCount: 2
  image:
    repository: bundler
    tag: v0.5.0
    digest: sha256:1111111111111111111111111111111111111111111111111111111111111111
  service:
    port: 8090
  resources:
    limits:
      cpu: 1
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

paymaster-supervisor:
  image:
    repository: paymaster-supervisor
    tag: v0.5.0
    digest: sha256:2222222222222222222222222222222222222222222222222222222222222222
  service:
    port: 8070
  replicaCount: 1
  gasTopUpThresholdUsd: 150
  treasuryAddress: "0x0000000000000000000000000000000000000000"

attester:
  replicaCount: 1
  image:
    repository: attester
    tag: v0.5.0
    digest: sha256:3333333333333333333333333333333333333333333333333333333333333333
  service:
    port: 8060
  eas:
    schemaUid: ""

ipfs:
  replicaCount: 1
  image:
    repository: ipfs
    tag: v0.21.0
    digest: sha256:4444444444444444444444444444444444444444444444444444444444444444
  persistence:
    enabled: true
    size: 100Gi

postgres:
  image:
    repository: postgres
    tag: "15"
    digest: sha256:5555555555555555555555555555555555555555555555555555555555555555
  persistence:
    size: 200Gi
  credentialsSecretName: subgraph-postgres-credentials

graph-node:
  image:
    repository: graph-node
    tag: v0.31.0
    digest: sha256:6666666666666666666666666666666666666666666666666666666666666666
  service:
    port: 8000
  ipfsEndpoint: http://ipfs:5001
  postgres:
    connectionSecretName: subgraph-postgres-credentials

ingress:
  className: nginx
  hosts:
    - host: orchestrator.example.com
      service: orchestrator
      port: 8080
      annotations:
        nginx.ingress.kubernetes.io/proxy-body-size: "2m"
        nginx.ingress.kubernetes.io/configuration-snippet: |
          more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
          more_set_headers "X-Frame-Options: DENY";
          more_set_headers "X-Content-Type-Options: nosniff";
          more_set_headers "Referrer-Policy: no-referrer";
          proxy_set_header X-RateLimit-Burst "50";
          proxy_set_header X-RateLimit-RPS "20";
      tlsSecret: orchestrator-tls
    - host: operators.example.com
      service: paymaster-supervisor
      port: 8070
      tlsSecret: operators-tls
  waf:
    enabled: true
    provider: cloudarmor
    policy: projects/example/policies/aa-edge
