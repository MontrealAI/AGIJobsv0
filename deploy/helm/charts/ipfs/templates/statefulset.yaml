apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ipfs.fullname" . }}
  labels:
    app.kubernetes.io/name: ipfs
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  serviceName: {{ include "ipfs.fullname" . }}
  replicas: {{ default 1 .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: ipfs
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ipfs
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: ipfs
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - daemon
            - --migrate=true
            - --routing=dhtclient
          env:
            - name: IPFS_PROFILE
              value: {{ default "server" .Values.config.profile | quote }}
          ports:
            - containerPort: {{ .Values.service.apiPort }}
              name: api
            - containerPort: {{ .Values.service.swarmPort }}
              name: swarm
            - containerPort: {{ .Values.service.gatewayPort }}
              name: gateway
          volumeMounts:
            - mountPath: /data/ipfs
              name: data
          livenessProbe:
            httpGet:
              path: /api/v0/version
              port: api
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/v0/id
              port: api
            initialDelaySeconds: 30
            periodSeconds: 30
      volumes:
        {{- if .Values.config.swarmKeySecret }}
        - name: swarm-key
          secret:
            secretName: {{ .Values.config.swarmKeySecret }}
        {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
