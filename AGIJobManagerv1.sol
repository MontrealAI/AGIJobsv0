// SPDX-License-Identifier: MIT
// AGIJobManagerV1 supersedes AGIJobManager v0

/*

[ P R E L I M I N A R Y  C O N C E P T S  E X C L U S I V E L Y ]

OF AGENTS, NODES, AND TOKENS

The Economy of AGI

AGI Nodes are catalysts in this new economy.

They yield $AGI, bridging the gap between aspirations and achievements.

Like digital farmers in a vast cognitive field, they cultivate the future.

"Unleash the power of Decentralized AGI with AGI Agents & Nodes, and unlock the future." - AGI.eth

Should it ascend to its fullest potential, $AGI stands poised to crystallize a vital segment of AGI's projected astronomic value.

           
   A   N   T   N   A   T
 -------------------------
A   G   I   N   O   D   E   S
 -------------------------
   T   A   N   A   T   N


$AGI: UTILITY, PURPOSE & VALUE

AGI Agents x AGI Nodes = Decentralized AGI

Theoretically, AGI Agents have the potential to become the central architects of future value, laying the foundation for The Economy of AGI.

At the heart of the Economy of AGI are the AGI Nodes. These Nodes, represented as Non-Fungible Tokens (NFTs), embody the ownership of computational assets. They provide AGI Agents with a decentralized, extensive, and powerful collection of computational resources. The sole raison d'être of the AGI Nodes is to contribute to the AGI Network. $AGI tokens are created solely through the operation of an AGI Node, generating active income only for the contribution of computational resources to the network. Crucially, holding $AGI tokens neither constitutes an investment in a common enterprise nor offers any expectation of profits derived from the efforts of others. Rather, $AGI tokens are minted as a reward for contributing computational resources, aligning more with the characteristics of a utility token than a security. The purpose is straightforward: to power the network, not to speculate on its future value.

When timely and appropriate, $AGI tokens—strictly utility tokens—can be used to acquire products or services generated by AGI Agents within the Economy of AGI framework, often represented as NFTs.

Legal Addendum: $AGI tokens are not securities and are not intended for speculative investment. They do not represent equity ownership, confer voting rights, or entitle holders to dividends or a share of profits. They are engineered exclusively for utility functions within the AGI Network, specifically for operating an AGI Node in order to contribute to the AGI Network, and for acquiring an array of products and services generated by AGI Agents.

[ C O N C E P T U A L  S T O R Y ]

THE ECONOMY OF AGI: AGI AGENTS, NODES AND TOKENS

In the expansive cosmos of human progress, seismic shifts occur, heralding eras that brim with promise and teem with unimagined potentials.

The Advent of the AGI Agents

Imagine beings of digital cognition, capable of performing any task a person can undertake with a computer, yet unbounded by our constraints. Far from being mere figments in the digital landscape, these entities serve as the crucibles of a transformative shift, igniting the intellectual abundance that will reshape our future.

A Symbiosis: AGI Agents and AGI Nodes

While seemingly independent, AGI Agents are entwined in a delicate pas de deux with AGI Nodes—the bedrock providing the resources for these Agents to operate. Consider these Nodes the landlords of digital landscapes, commanding a formidable arsenal of computational might that AGI Agents leverage to weave value. This intricate ballet underscores a web of interconnected fate, with each entity's existence intrinsically tied to the other's operation.

The Economy of AGI: $AGI Tokens and NFTs

Within this cavalcade of ingenuity emerges a groundbreaking financial architecture, introducing the $AGI token as a medium for operational transactions within the network. Derived from the relentless operation of AGI Nodes, the $AGI token represents a visionary chronicle where cognition has transcended traditional boundaries, redefining the established yardsticks of wealth and ambition. This token serves as the universal medium for acquiring an array of products and services, the labor of the AGI Agents manifesting in the form of unique NFTs.

The Ethical Layer: Ensuring Accountability

As we voyage into this new era, anchoring our inventions in ethical terra firma becomes non-negotiable. To this end, each AGI Agent and Node is assigned its own ENS AGI subdomain, a beacon of trust that ensures each Agent and Node operates within the boundaries of ethical AI, all within a system architected to uphold ethical norms.

Mitigating the Unemployment Conundrum

A critical consideration in this transformative journey is the potential unemployment that AGI could inadvertently cause. The key to disentangling this Gordian knot lies in the democratization of ownership—AGI Agents and AGI Nodes can be owned, and hence, can provide a hedge against the risk of unemployment. These entities, when operated, can generate substantial utility and value within the network.

A Sovereign Future

Our future thus unfurls as a panorama of limitless potential. As sovereign entities, AGI Agents and Nodes orchestrate a coming age where the triad of privacy, personalization, and potency find harmonic unity.

In this mesmerizing narrative, we all emerge as pioneers, architects of a societal model vibrating with untapped intellectual prowess. The age of AGI Agents is not a distant dream but our shared horizon. Let's embrace the Economy of AGI Agents, a venture into the annals of human endeavor unlike any before.

"AGI symbolizes the linchpin that connects the boundless potential of our aspirations to the tangible confines of reality, fashioning a gateway between the fanciful musings of the mind and the attainable horizons of success." - AGI.eth

[ R E G U L A T O R Y  C O M P L I A N C E  &  L E G A L  D I S C L O S U R E S ]

Published by: AGI.eth

Approval Authority: AGI.eth

Office of Primary Responsibility: AGI.eth

1. Utility Token Clause: The $AGI token is intrinsically designed to enable active participation in the AGI Network, exclusively facilitating transactions and operational tasks within this ecosystem.

2. No Expectation of Profit: $AGI tokens are created solely through active node operation, with any financial gains being incidental and non-guaranteed. These tokens are not for speculative investment but for facilitating specific actions within the AGI Network.

3. No Ownership or Voting Rights: Holding $AGI tokens confers no ownership, shares, equity, or voting rights in any entity associated with AGI.eth or the AGI Network.

4. No Common Enterprise: $AGI tokens serve as individual operational assets and are not an investment in a common enterprise, as defined by securities laws.

5. Active Participation: $AGI tokens are minted only through active participation, which involves contributing computational resources to the network.

6. No Financial Entitlement: Holding $AGI tokens does not grant entitlement to dividends, revenue-sharing, or any financial benefits; they are not designed for investment.

7. User Acknowledgment: All users must expressly acknowledge that $AGI tokens are not securities and do not confer financial benefits. This acknowledgment is legally binding and constitutes part of the User Agreement Requirement.

8. User Agreement Requirement: All users interacting with this contract are required to agree to the Terms of Service, which provide further legal and ethical guidelines, including the non-security nature of $AGI tokens.

THIS IS PART OF AN ASPIRATIONAL RESEARCH PROGRAM WITH AN AMBITIOUS RESEARCH AGENDA. AGI AGENTS AND AGI NODES ARE COMMODITIES. THEY ARE LIKELY RETAILED BY DISTINCT OPERATING INTERNATIONAL ENTITIES ESTABLISHED AS APPROPRIATE IN SPACE AND TIME. WHILE, AS INDUCEMENTS FOR OPERATION, AGI NODES MAY OFFER THE PROSPECT OF EARNING $AGI, WHICH IS MOST LIKELY MANAGED BY A SERIES OF DISTINCT FOUNDATIONS OR ORGANIZATIONS ESTABLISHED WHEN AND WHERE APPROPRIATE, ANY EXPECTATION OF PROFIT OR RETURN IS UNJUSTIFIED. POSSESSION OF $AGI OR OF AN AGI AGENT OR OF AN AGI NODE DOES NOT SIGNIFY OR ESTABLISH ANY ENTITLEMENT OR INTEREST, SHARE OR EQUITY, BOND OR ANALOGOUS ENTITLEMENT, OR ANY RIGHT TO OBTAIN ANY FUTURE INCOME. MATERIALS PROVIDED IN THIS SYSTEM ARE WITHOUT WARRANTY OF ANY KIND AND DO NOT CONSTITUTE ENDORSEMENT AND CAN BE MODIFIED AT ANY TIME. BY USING THE PRESENT SYSTEM, YOU AGREE TO THE $AGI TERMS AND CONDITIONS. ANY USE OF THIS SYSTEM, OR ANY OF THE INFORMATION CONTAINED HEREIN, FOR OTHER THAN THE PURPOSE FOR WHICH IT WAS DEVELOPED, IS EXPRESSLY PROHIBITED, EXCEPT AS AGI.ETH MAY OTHERWISE AGREE TO IN WRITING OFFICIALLY.

OVERRIDING AUTHORITY: AGI.ETH
   
*/

pragma solidity ^0.8.30;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/Pausable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";

interface ENS {
    function resolver(bytes32 node) external view returns (address);
}

interface Resolver {
    function addr(bytes32 node) external view returns (address payable);
}

interface NameWrapper {
    function ownerOf(uint256 id) external view returns (address);
}

contract AGIJobManagerV1 is Ownable, ReentrancyGuard, Pausable, ERC721URIStorage {
    using ECDSA for bytes32;
    using MerkleProof for bytes32[];

    IERC20 public agiToken;
    string private baseIpfsUrl;
    uint256 public requiredValidatorApprovals = 3;
    uint256 public requiredValidatorDisapprovals = 3;
    uint256 public premiumReputationThreshold = 10000;
    uint256 public validationRewardPercentage = 8;
    uint256 public maxJobPayout = 4888e18;
    uint256 public jobDurationLimit = 10000000;

    string public termsAndConditionsIpfsHash;
    string public contactEmail;
    string public additionalText1;
    string public additionalText2;
    string public additionalText3;

    bytes32 public clubRootNode;
    bytes32 public agentRootNode;
    bytes32 public validatorMerkleRoot;
    bytes32 public agentMerkleRoot;
    ENS public ens;
    NameWrapper public nameWrapper;

    struct Job {
        uint256 id;
        address employer;
        string ipfsHash;
        uint256 payout;
        uint256 duration;
        address assignedAgent;
        uint256 assignedAt;
        bool completed;
        bool completionRequested;
        uint256 validatorApprovals;
        uint256 validatorDisapprovals;
        bool disputed;
        string details;
        mapping(address => bool) approvals;
        mapping(address => bool) disapprovals;
        address[] validators;
    }

    struct AGIType {
        address nftAddress;
        uint256 payoutPercentage;
    }

    struct Listing {
        uint256 tokenId;
        address seller;
        uint256 price;
        bool isActive;
    }

    uint256 public nextJobId;
    uint256 public nextTokenId;
    mapping(uint256 => Job) public jobs;
    mapping(address => uint256) public reputation;
    mapping(address => bool) public moderators;
    mapping(address => bool) public additionalValidators;
    mapping(address => bool) public additionalAgents;
    mapping(address => uint256[]) public validatorApprovedJobs;
    mapping(uint256 => Listing) public listings;
    mapping(address => bool) public blacklistedAgents;
    mapping(address => bool) public blacklistedValidators;
    AGIType[] public agiTypes;

    event JobCreated(uint256 jobId, string ipfsHash, uint256 payout, uint256 duration, string details);
    event JobApplied(uint256 jobId, address agent);
    event JobCompletionRequested(uint256 jobId, address agent);
    event JobValidated(uint256 jobId, address validator);
    event JobDisapproved(uint256 jobId, address validator);
    event JobCompleted(uint256 jobId, address agent, uint256 reputationPoints);
    event ReputationUpdated(address user, uint256 newReputation);
    event JobCancelled(uint256 jobId);
    event DisputeResolved(uint256 jobId, address resolver, string resolution);
    event JobDisputed(uint256 jobId, address disputant);
    event RootNodeUpdated(bytes32 indexed newRootNode);
    event MerkleRootUpdated(bytes32 indexed newMerkleRoot);
    event OwnershipVerified(address claimant, string subdomain);
    event RecoveryInitiated(string reason);
    event AGITypeUpdated(address indexed nftAddress, uint256 payoutPercentage);
    event NFTIssued(uint256 indexed tokenId, address indexed employer, string tokenURI);
    event NFTListed(uint256 indexed tokenId, address indexed seller, uint256 price);
    event NFTPurchased(uint256 indexed tokenId, address indexed buyer, uint256 price);
    event NFTDelisted(uint256 indexed tokenId);
    event RewardPoolContribution(address indexed contributor, uint256 amount);

    constructor(
        address _agiTokenAddress,
        string memory _baseIpfsUrl,
        address _ensAddress,
        address _nameWrapperAddress,
        bytes32 _clubRootNode,
        bytes32 _agentRootNode,
        bytes32 _validatorMerkleRoot,
        bytes32 _agentMerkleRoot
    ) ERC721("AGIJobs", "Job") Ownable(msg.sender) {
        agiToken = IERC20(_agiTokenAddress);
        baseIpfsUrl = _baseIpfsUrl;
        ens = ENS(_ensAddress);
        nameWrapper = NameWrapper(_nameWrapperAddress);
        clubRootNode = _clubRootNode;
        agentRootNode = _agentRootNode;
        validatorMerkleRoot = _validatorMerkleRoot;
        agentMerkleRoot = _agentMerkleRoot;
    }

    modifier onlyModerator() {
        require(moderators[msg.sender], "Not a moderator");
        _;
    }

    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }

    function createJob(string memory _ipfsHash, uint256 _payout, uint256 _duration, string memory _details) external whenNotPaused nonReentrant {
        require(_payout > 0 && _duration > 0 && _payout <= maxJobPayout && _duration <= jobDurationLimit, "Invalid job parameters");
        uint256 jobId = nextJobId++;
        Job storage job = jobs[jobId];
        job.id = jobId;
        job.employer = msg.sender;
        job.ipfsHash = _ipfsHash;
        job.payout = _payout;
        job.duration = _duration;
        job.details = _details;
        require(agiToken.transferFrom(msg.sender, address(this), _payout), "Escrow payment failed");
        emit JobCreated(jobId, _ipfsHash, _payout, _duration, _details);
    }

    function applyForJob(uint256 _jobId, string memory subdomain, bytes32[] calldata proof) external whenNotPaused nonReentrant {
        Job storage job = jobs[_jobId];
        require(job.assignedAgent == address(0), "Job already assigned");
        require((_verifyOwnership(msg.sender, subdomain, proof, agentRootNode) || additionalAgents[msg.sender]) && !blacklistedAgents[msg.sender], "Not authorized agent");
        job.assignedAgent = msg.sender;
        job.assignedAt = block.timestamp;
        emit JobApplied(_jobId, msg.sender);
    }

    function requestJobCompletion(uint256 _jobId, string calldata _ipfsHash) external whenNotPaused {
        Job storage job = jobs[_jobId];
        require(msg.sender == job.assignedAgent && block.timestamp <= job.assignedAt + job.duration, "Not authorized or expired");
        job.ipfsHash = _ipfsHash;
        job.completionRequested = true;
        emit JobCompletionRequested(_jobId, msg.sender);
    }

    function validateJob(uint256 _jobId, string memory subdomain, bytes32[] calldata proof) external whenNotPaused nonReentrant {
        require(_verifyOwnership(msg.sender, subdomain, proof, clubRootNode) || additionalValidators[msg.sender], "Not authorized validator");
        require(!blacklistedValidators[msg.sender], "Blacklisted validator");
        Job storage job = jobs[_jobId];
        require(!job.completed && !job.approvals[msg.sender], "Job completed or already approved");
        job.validatorApprovals++;
        job.approvals[msg.sender] = true;
        job.validators.push(msg.sender);
        validatorApprovedJobs[msg.sender].push(_jobId);
        emit JobValidated(_jobId, msg.sender);
        if (job.validatorApprovals >= requiredValidatorApprovals) _completeJob(_jobId);
    }

    function disapproveJob(uint256 _jobId, string memory subdomain, bytes32[] calldata proof) external whenNotPaused nonReentrant {
        require(_verifyOwnership(msg.sender, subdomain, proof, clubRootNode) || additionalValidators[msg.sender], "Not authorized validator");
        require(!blacklistedValidators[msg.sender], "Blacklisted validator");
        Job storage job = jobs[_jobId];
        require(!job.completed && !job.disapprovals[msg.sender], "Job completed or already disapproved");
        job.validatorDisapprovals++;
        job.disapprovals[msg.sender] = true;
        job.validators.push(msg.sender);
        validatorApprovedJobs[msg.sender].push(_jobId);
        emit JobDisapproved(_jobId, msg.sender);
        if (job.validatorDisapprovals >= requiredValidatorDisapprovals) {
            job.disputed = true;
            emit JobDisputed(_jobId, msg.sender);
        }
    }

    function disputeJob(uint256 _jobId) external whenNotPaused nonReentrant {
        Job storage job = jobs[_jobId];
        require((msg.sender == job.assignedAgent || msg.sender == job.employer) && !job.disputed && !job.completed, "Not authorized or invalid state");
        job.disputed = true;
        emit JobDisputed(_jobId, msg.sender);
    }

    function resolveDispute(uint256 _jobId, string calldata resolution) external onlyModerator nonReentrant {
        Job storage job = jobs[_jobId];
        require(job.disputed, "Job not disputed");
        if (keccak256(abi.encodePacked(resolution)) == keccak256(abi.encodePacked("agent win"))) {
            _completeJob(_jobId);
        } else if (keccak256(abi.encodePacked(resolution)) == keccak256(abi.encodePacked("employer win"))) {
            agiToken.transfer(job.employer, job.payout);
        }
        job.disputed = false;
        emit DisputeResolved(_jobId, msg.sender, resolution);
    }

    function blacklistAgent(address _agent, bool _status) external onlyOwner {
        blacklistedAgents[_agent] = _status;
    }

    function blacklistValidator(address _validator, bool _status) external onlyOwner {
        blacklistedValidators[_validator] = _status;
    }

    function delistJob(uint256 _jobId) external onlyOwner {
        Job storage job = jobs[_jobId];
        require(!job.completed && job.assignedAgent == address(0), "Job already completed or assigned");
        agiToken.transfer(job.employer, job.payout);
        delete jobs[_jobId];
        emit JobCancelled(_jobId);
    }

    function addModerator(address _moderator) external onlyOwner {
        moderators[_moderator] = true;
    }

    function removeModerator(address _moderator) external onlyOwner {
        moderators[_moderator] = false;
    }

    function updateAGITokenAddress(address _newTokenAddress) external onlyOwner {
        agiToken = IERC20(_newTokenAddress);
    }

    function setBaseIpfsUrl(string calldata _url) external onlyOwner {
        baseIpfsUrl = _url;
    }

    function setRequiredValidatorApprovals(uint256 _approvals) external onlyOwner {
        requiredValidatorApprovals = _approvals;
    }

    function setRequiredValidatorDisapprovals(uint256 _disapprovals) external onlyOwner {
        requiredValidatorDisapprovals = _disapprovals;
    }

    function setPremiumReputationThreshold(uint256 _threshold) external onlyOwner {
        premiumReputationThreshold = _threshold;
    }

    function setMaxJobPayout(uint256 _maxPayout) external onlyOwner {
        maxJobPayout = _maxPayout;
    }

    function setJobDurationLimit(uint256 _limit) external onlyOwner {
        jobDurationLimit = _limit;
    }

    function updateTermsAndConditionsIpfsHash(string calldata _hash) external onlyOwner {
        termsAndConditionsIpfsHash = _hash;
    }

    function updateContactEmail(string calldata _email) external onlyOwner {
        contactEmail = _email;
    }

    function updateAdditionalText1(string calldata _text) external onlyOwner {
        additionalText1 = _text;
    }

    function updateAdditionalText2(string calldata _text) external onlyOwner {
        additionalText2 = _text;
    }

    function updateAdditionalText3(string calldata _text) external onlyOwner {
        additionalText3 = _text;
    }

    function getJobStatus(uint256 _jobId) external view returns (bool, bool, string memory) {
        Job storage job = jobs[_jobId];
        return (job.completed, job.completionRequested, job.ipfsHash);
    }

    function setValidationRewardPercentage(uint256 _percentage) external onlyOwner {
        require(_percentage > 0 && _percentage <= 100, "Invalid percentage");
        validationRewardPercentage = _percentage;
    }

    function calculateReputationPoints(uint256 _payout, uint256 _duration) internal pure returns (uint256) {
        uint256 scaledPayout = _payout / 1e18;
        uint256 payoutPoints = scaledPayout ** 3 / 1e5;
        return log2(1 + payoutPoints * 1e6) + _duration / 10000;
    }

    function calculateValidatorReputationPoints(uint256 agentReputationGain) internal view returns (uint256) {
        return (agentReputationGain * validationRewardPercentage) / 100;
    }

    function log2(uint x) internal pure returns (uint y) {
        assembly {
            let arg := x
            x := sub(x, 1)
            x := or(x, div(x, 0x02))
            x := or(x, div(x, 0x04))
            x := or(x, div(x, 0x10))
            x := or(x, div(x, 0x100))
            x := or(x, div(x, 0x10000))
            x := or(x, div(x, 0x100000000))
            x := or(x, div(x, 0x10000000000000000))
            x := or(x, div(x, 0x100000000000000000000000000000000))
            x := add(x, 1)
            y := 0
            for { let shift := 128 } gt(shift, 0) { shift := div(shift, 2) } {
                let temp := shr(shift, x)
                if gt(temp, 0) {
                    x := temp
                    y := add(y, shift)
                }
            }
        }
    }

    function enforceReputationGrowth(address _user, uint256 _points) internal {
        uint256 currentReputation = reputation[_user];
        uint256 newReputation = currentReputation + _points;

        // Apply diminishing return: soft at low, strong near max
        uint256 diminishingFactor = 1 + ((newReputation * newReputation) / (88888 * 88888));
        uint256 diminishedReputation = newReputation / diminishingFactor;

        if (diminishedReputation > 88888) {
            reputation[_user] = 88888;
        } else {
            reputation[_user] = diminishedReputation;
        }
        emit ReputationUpdated(_user, reputation[_user]);
    }

    function cancelJob(uint256 _jobId) external nonReentrant {
        Job storage job = jobs[_jobId];
        require(msg.sender == job.employer && !job.completed && job.assignedAgent == address(0), "Not authorized or already completed/assigned");
        agiToken.transfer(job.employer, job.payout);
        delete jobs[_jobId];
        emit JobCancelled(_jobId);
    }

    function _completeJob(uint256 _jobId) internal {
        Job storage job = jobs[_jobId];
        job.completed = true;
        uint256 completionTime = block.timestamp - job.assignedAt;
        uint256 reputationPoints = calculateReputationPoints(job.payout, completionTime);
        enforceReputationGrowth(job.assignedAgent, reputationPoints);

        uint256 agentPayoutPercentage = getHighestPayoutPercentage(job.assignedAgent);
        uint256 agentPayout = (job.payout * agentPayoutPercentage) / 100;

        require(agiToken.transfer(job.assignedAgent, agentPayout), "Payment to agent failed");

        uint256 totalValidatorPayout = (job.payout * validationRewardPercentage) / 100;
        uint256 validatorPayout = totalValidatorPayout / job.validators.length;
        uint256 validatorReputationGain = calculateValidatorReputationPoints(reputationPoints);

        for (uint256 i = 0; i < job.validators.length; i++) {
            address validator = job.validators[i];
            require(agiToken.transfer(validator, validatorPayout), "Payment to validator failed");
            enforceReputationGrowth(validator, validatorReputationGain);
        }

        uint256 tokenId = nextTokenId++;
        string memory tokenURI = string(abi.encodePacked(baseIpfsUrl, "/", job.ipfsHash));
        _mint(job.employer, tokenId);
        _setTokenURI(tokenId, tokenURI);
        emit NFTIssued(tokenId, job.employer, tokenURI);

        emit JobCompleted(_jobId, job.assignedAgent, reputationPoints);
        emit ReputationUpdated(job.assignedAgent, reputation[job.assignedAgent]);
    }

    function listNFT(uint256 tokenId, uint256 price) external {
        require(ownerOf(tokenId) == msg.sender && price > 0, "Not authorized or invalid price");
        listings[tokenId] = Listing(tokenId, msg.sender, price, true);
        emit NFTListed(tokenId, msg.sender, price);
    }

    function purchaseNFT(uint256 tokenId) external {
        Listing storage listing = listings[tokenId];
        require(listing.isActive, "Listing not active");
        require(agiToken.transferFrom(msg.sender, listing.seller, listing.price), "Payment failed");
        _transfer(listing.seller, msg.sender, tokenId);
        listing.isActive = false;
        emit NFTPurchased(tokenId, msg.sender, listing.price);
    }

    function delistNFT(uint256 tokenId) external {
        Listing storage listing = listings[tokenId];
        require(listing.isActive && listing.seller == msg.sender, "Not authorized or listing not active");
        listing.isActive = false;
        emit NFTDelisted(tokenId);
    }

    function _verifyOwnership(address claimant, string memory subdomain, bytes32[] calldata proof, bytes32 rootNode) internal returns (bool) {
        bytes32 leaf = keccak256(abi.encodePacked(claimant));
        if (proof.verify(rootNode == agentRootNode ? agentMerkleRoot : validatorMerkleRoot, leaf)) {
            emit OwnershipVerified(claimant, subdomain);
            return true;
        }

        bytes32 subnode = keccak256(abi.encodePacked(rootNode, keccak256(bytes(subdomain))));
        try nameWrapper.ownerOf(uint256(subnode)) returns (address actualOwner) {
            if (actualOwner == claimant) {
                emit OwnershipVerified(claimant, subdomain);
                return true;
            }
        } catch Error(string memory reason) {
            emit RecoveryInitiated(reason);
        } catch {
            emit RecoveryInitiated("NameWrapper call failed without a specified reason.");
        }

        address resolverAddress = ens.resolver(subnode);
        if (resolverAddress != address(0)) {
            Resolver resolver = Resolver(resolverAddress);
            try resolver.addr(subnode) returns (address payable resolvedAddress) {
                if (resolvedAddress == claimant) {
                    emit OwnershipVerified(claimant, subdomain);
                    return true;
                }
            } catch {
                emit RecoveryInitiated("Resolver call failed without a specified reason.");
            }
        } else {
            emit RecoveryInitiated("Resolver address not found for node.");
        }

        return false;
    }

    function addAdditionalValidator(address validator) external onlyOwner {
        additionalValidators[validator] = true;
    }

    function removeAdditionalValidator(address validator) external onlyOwner {
        additionalValidators[validator] = false;
    }

    function addAdditionalAgent(address agent) external onlyOwner {
        additionalAgents[agent] = true;
    }

    function removeAdditionalAgent(address agent) external onlyOwner {
        additionalAgents[agent] = false;
    }

    function withdrawAGI(uint256 amount) external onlyOwner nonReentrant {
        require(amount > 0 && amount <= agiToken.balanceOf(address(this)), "Invalid amount");
        agiToken.transfer(msg.sender, amount);
    }

    function canAccessPremiumFeature(address user) public view returns (bool) {
        return reputation[user] >= premiumReputationThreshold;
    }

    function contributeToRewardPool(uint256 amount) external whenNotPaused nonReentrant {
        require(amount > 0, "Invalid amount");
        agiToken.transferFrom(msg.sender, address(this), amount);
        emit RewardPoolContribution(msg.sender, amount);
    }

    function addAGIType(address nftAddress, uint256 payoutPercentage) external onlyOwner {
        require(nftAddress != address(0) && payoutPercentage > 0 && payoutPercentage <= 100, "Invalid parameters");

        bool exists = false;
        for (uint256 i = 0; i < agiTypes.length; i++) {
            if (agiTypes[i].nftAddress == nftAddress) {
                agiTypes[i].payoutPercentage = payoutPercentage;
                exists = true;
                break;
            }
        }
        if (!exists) {
            agiTypes.push(AGIType({ nftAddress: nftAddress, payoutPercentage: payoutPercentage }));
        }

        emit AGITypeUpdated(nftAddress, payoutPercentage);
    }

    function getHighestPayoutPercentage(address agent) public view returns (uint256) {
        uint256 highestPercentage = 0;
        for (uint256 i = 0; i < agiTypes.length; i++) {
            if (IERC721(agiTypes[i].nftAddress).balanceOf(agent) > 0 && agiTypes[i].payoutPercentage > highestPercentage) {
                highestPercentage = agiTypes[i].payoutPercentage;
            }
        }
        return highestPercentage;
    }
}

