name: Supply Chain & Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-scan:
    name: Build, SBOM, Sign
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [orchestrator, bundler, paymaster-supervisor, attester]
        environment: [testnet, mainnet]
    env:
      REGISTRY: ghcr.io/agi/protocol
      SERVICE: ${{ matrix.service }}
      ENVIRONMENT: ${{ matrix.environment }}
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      digest: ${{ steps.digest.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/${{ matrix.service }}/Dockerfile
          push: true
          provenance: false
          tags: |
            ${{ env.REGISTRY }}/${{ env.SERVICE }}:${{ github.sha }}-${{ env.ENVIRONMENT }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.SERVICE }},push-by-digest=true
      - name: Capture digest
        id: digest
        run: |
          echo "value=${{ steps.build.outputs.digest }}" >> "$GITHUB_OUTPUT"
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.SERVICE }}@${{ steps.build.outputs.digest }}
          output-file: sbom-${{ env.SERVICE }}-${{ env.ENVIRONMENT }}.spdx.json
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ env.SERVICE }}-${{ env.ENVIRONMENT }}
          path: sbom-${{ env.SERVICE }}-${{ env.ENVIRONMENT }}.spdx.json
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0
      - name: Sign image
        env:
          COSIGN_YES: "true"
        run: |
          cosign sign ${{ env.REGISTRY }}/${{ env.SERVICE }}@${{ steps.build.outputs.digest }}
      - name: Generate provenance
        uses: slsa-framework/slsa-github-generator/actions/upload-provenance@v1
        with:
          subject-path: |
            ghcr.io/agi/protocol/${{ env.SERVICE }}@${{ steps.build.outputs.digest }}

  helm-verify:
    name: Helm Digest Verification
    runs-on: ubuntu-latest
    needs: build-and-scan
    steps:
      - uses: actions/checkout@v4
      - name: Ensure digests pinned in values
        run: |
          python - <<'PY'
          import yaml, sys
          with open('deploy/helm/values.yaml') as fh:
              data = yaml.safe_load(fh)
          components = ['orchestrator', 'bundler', 'paymaster-supervisor', 'attester', 'ipfs', 'postgres', 'graph-node']
          missing = [c for c in components if not data.get(c, {}).get('image', {}).get('digest')]
          if missing:
              raise SystemExit(f"Missing immutable digest for: {', '.join(missing)}")
          PY
      - name: Helm dependency update
        run: helm dependency update deploy/helm
      - name: Helm lint
        run: helm lint deploy/helm
      - name: Render manifest smoke test
        run: helm template aa-stack deploy/helm --namespace aa
      - name: Export chart metadata
        run: helm show chart deploy/helm > helm-chart-metadata.txt
      - uses: actions/upload-artifact@v4
        with:
          name: helm-chart-metadata
          path: helm-chart-metadata.txt

  release:
    name: Signed Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build-and-scan, helm-verify]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download SBOM artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Compute release version
        id: version
        run: |
          echo "value=v$(date +%Y.%m.%d)-${GITHUB_RUN_NUMBER}" >> "$GITHUB_OUTPUT"
      - name: Create git tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag ${{ steps.version.outputs.value }}
          git push origin ${{ steps.version.outputs.value }}
      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.value }}
          name: ${{ steps.version.outputs.value }}
          generate_release_notes: true
          files: dist/**/*.spdx.json
