name: security

on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: '0 3 * * 1'

permissions:
  contents: read
  security-events: write
  id-token: write

concurrency:
  group: security-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-suite:
    runs-on: ubuntu-latest
    outputs:
      provenance_subjects: ${{ steps.provenance-subjects.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: detect --redact --verbose

      - name: npm audit (fail on high)
        run: npm audit --audit-level=high

      - name: License checker
        run: |
          mkdir -p reports
          npx license-checker --summary --production --development --out reports/license-summary.txt

      - name: Slither static analysis
        run: |
          set -euo pipefail
          forge_out="$(mktemp -d)"
          forge_build_info="$(mktemp -d)"
          forge_cache="$(mktemp -d)"
          cleanup() {
            rm -rf "$forge_out" "$forge_build_info" "$forge_cache"
          }
          trap cleanup EXIT
          mkdir -p "${forge_build_info}" "${forge_cache}" "${forge_out}"
          chmod 0777 "$forge_out" "$forge_build_info" "$forge_cache"
          uid="$(id -u)"
          gid="$(id -g)"
          docker run --rm \
            --user "${uid}:${gid}" \
            -v "$PWD":/src \
            -v "${forge_out}":/tmp/forge-out \
            -v "${forge_build_info}":/tmp/forge-build-info \
            -v "${forge_cache}":/tmp/forge-cache \
            -e FOUNDRY_OUT=/tmp/forge-out \
            -e FOUNDRY_BUILD_INFO_PATH=/tmp/forge-build-info \
            -e FOUNDRY_CACHE_PATH=/tmp/forge-cache \
            -e PATH="/home/ethsec/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \
            -e HOME=/tmp \
            -w /src \
            trailofbits/eth-security-toolbox:nightly-20240902 \
            bash -c 'set -euo pipefail; slither . --fail-high --exclude-dependencies --sarif slither.sarif'

      - name: Upload Slither SARIF
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: slither-sarif
          path: slither.sarif

      - name: Mythril quick scan
        run: |
          docker run --rm \
            -v "$PWD":/src \
            -w /src \
            mythril/myth:0.24.3 \
            analyze contracts/v2/modules/JobRegistryModule.sol \
              --execution-timeout 120 \
              --solc-args "--base-path . --include-path node_modules --allow-paths .,node_modules" \
              --solc-remaps "@openzeppelin=node_modules/@openzeppelin"

      - name: Prepare report directories
        run: |
          mkdir -p reports/sbom

      - name: Generate SBOM (SPDX JSON)
        uses: anchore/sbom-action@v0.17.5
        with:
          path: .
          format: spdx-json
          output-file: reports/sbom/spdx.json

      - name: Upload security artefacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-artifacts
          path: |
            reports/license-summary.txt
            reports/sbom/spdx.json

      - name: Prepare provenance subjects
        if: startsWith(github.ref, 'refs/tags/')
        id: provenance-subjects
        run: |
          set -euo pipefail
          sha_value=$(sha256sum reports/sbom/spdx.json | awk '{print $1}')
          subject_line="${sha_value}  reports/sbom/spdx.json"
          if command -v base64 >/dev/null 2>&1; then
            if [ "$(uname)" = "Darwin" ]; then
              encoded=$(printf "%s" "$subject_line" | base64)
            else
              encoded=$(printf "%s" "$subject_line" | base64 -w0)
            fi
          else
            echo "base64 utility not found" >&2
            exit 1
          fi
          echo "value=$encoded" >> "$GITHUB_OUTPUT"

  slsa-provenance:
    if: startsWith(github.ref, 'refs/tags/')
    needs: security-suite
    permissions:
      actions: read
      contents: write
      id-token: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: ${{ needs.security-suite.outputs.provenance_subjects }}
      provenance-name: provenance.intoto.jsonl
    secrets: inherit

  publish-provenance:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: slsa-provenance
    steps:
      - name: Download provenance attestation
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.slsa-provenance.outputs.provenance-name }}
          path: reports

      - name: Upload provenance statement
        uses: actions/upload-artifact@v4
        with:
          name: provenance
          path: reports/provenance.intoto.jsonl
