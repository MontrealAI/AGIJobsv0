name: Security Suite (v2)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  security-suite:
    name: security-suite
    runs-on: ubuntu-latest
    timeout-minutes: 45
    outputs:
      provenance_subjects: ${{ steps.provenance-subjects.outputs.value }}
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Detect package manager
        id: pm
        run: |
          if [ -f pnpm-lock.yaml ]; then
            echo "manager=pnpm" >> "$GITHUB_OUTPUT"
          elif [ -f yarn.lock ]; then
            echo "manager=yarn" >> "$GITHUB_OUTPUT"
          else
            echo "manager=npm" >> "$GITHUB_OUTPUT"
          fi

      - name: Use Node 20 (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.pm.outputs.manager }}
          cache-dependency-path: |
            package-lock.json
            pnpm-lock.yaml
            yarn.lock

      - name: Install Node dependencies
        run: |
          case "${{ steps.pm.outputs.manager }}" in
            pnpm)
              corepack enable
              pnpm install --frozen-lockfile --ignore-scripts
              ;;
            yarn)
              corepack enable
              yarn install --frozen-lockfile --ignore-scripts
              ;;
            npm|*)
              npm ci --ignore-scripts
              ;;
          esac

      - name: npm audit (fail on HIGH and above)
        if: steps.pm.outputs.manager == 'npm'
        continue-on-error: true
        run: npm audit --production --audit-level=high

      - name: Prepare reports directory
        run: mkdir -p reports/sbom

      - name: Gitleaks – secrets detection
        uses: gitleaks/gitleaks-action@v2
        with:
          args: >-
            detect --no-git --redact --verbose
            --report-format sarif
            --report-path reports/gitleaks.sarif
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Gitleaks SARIF to Code Scanning
        if: ${{ hashFiles('reports/gitleaks.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/gitleaks.sarif
          category: gitleaks

      - name: License checker summary
        run: |
          case "${{ steps.pm.outputs.manager }}" in
            pnpm)
              pnpm dlx license-checker --summary --production --development --out reports/license-summary.txt
              ;;
            yarn)
              npx license-checker --summary --production --development --out reports/license-summary.txt
              ;;
            npm|*)
              npx license-checker --summary --production --development --out reports/license-summary.txt
              ;;
          esac

      - name: Install Foundry toolchain
        if: ${{ hashFiles('**/foundry.toml') != '' }}
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Build contracts with Foundry
        if: ${{ hashFiles('**/foundry.toml') != '' }}
        run: |
          forge --version
          forge clean
          forge build --build-info --skip '*/test/**' '*/script/**'

      - name: Compile Hardhat projects (if present)
        if: ${{ hashFiles('**/hardhat.config.*') != '' }}
        run: npx hardhat compile

      - name: Slither – static analysis (fail on HIGH)
        uses: crytic/slither-action@v0.4.1
        with:
          slither-args: >-
            --fail-high
            --exclude-dependencies
            --sarif reports/slither.sarif
          ignore-compile: true

      - name: Upload Slither SARIF to Code Scanning
        if: ${{ hashFiles('reports/slither.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/slither.sarif
          category: slither

      - name: Mythril quick scan
        run: |
          docker run --rm \
            -v "$PWD":/src \
            -w /src \
            mythril/myth:0.24.3 \
            analyze contracts/v2/modules/JobRegistryModule.sol \
              --execution-timeout 120 \
              --solc-args "--base-path . --include-path node_modules --allow-paths .,node_modules" \
              --solc-remaps "@openzeppelin=node_modules/@openzeppelin"

      - name: Generate SBOM (SPDX JSON)
        uses: anchore/sbom-action@v0.17.5
        with:
          path: .
          format: spdx-json
          output-file: reports/sbom/spdx.json

      - name: Upload security-suite artifacts
        if: ${{ always() && hashFiles('reports/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: security-suite-reports
          path: reports/
          if-no-files-found: warn

      - name: Prepare provenance subjects
        if: startsWith(github.ref, 'refs/tags/')
        id: provenance-subjects
        run: |
          set -euo pipefail
          sha_value=$(sha256sum reports/sbom/spdx.json | awk '{print $1}')
          subject_line="${sha_value}  reports/sbom/spdx.json"
          if command -v base64 >/dev/null 2>&1; then
            if [ "$(uname)" = "Darwin" ]; then
              encoded=$(printf "%s" "$subject_line" | base64)
            else
              encoded=$(printf "%s" "$subject_line" | base64 -w0)
            fi
          else
            echo "base64 utility not found" >&2
            exit 1
          fi
          echo "value=$encoded" >> "$GITHUB_OUTPUT"

  slsa-provenance:
    if: startsWith(github.ref, 'refs/tags/')
    needs: security-suite
    permissions:
      actions: read
      contents: write
      id-token: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: ${{ needs.security-suite.outputs.provenance_subjects }}
      provenance-name: provenance.intoto.jsonl
    secrets: inherit

  publish-provenance:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: slsa-provenance
    steps:
      - name: Download provenance attestation
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.slsa-provenance.outputs.provenance-name }}
          path: reports

      - name: Upload provenance statement
        uses: actions/upload-artifact@v4
        with:
          name: provenance
          path: reports/provenance.intoto.jsonl
