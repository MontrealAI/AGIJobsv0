name: security

on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: '0 3 * * 1'

permissions:
  contents: read
  security-events: write
  id-token: write

concurrency:
  group: security-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-suite:
    runs-on: ubuntu-latest
    outputs:
      sbom-base64: ${{ steps.sbom_digest.outputs.base64_subjects }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --redact --verbose

      - name: npm audit (fail on high)
        run: npm audit --audit-level=high

      - name: License checker
        run: |
          mkdir -p reports
          npx license-checker --summary --production --development --out reports/license-summary.txt

      - name: Slither static analysis
        run: |
          docker run --rm \
            -v "$PWD":/src \
            -w /src \
            trailofbits/eth-security-toolbox:nightly-20240902 \
            slither . --fail-high --exclude-dependencies --sarif slither.sarif

      - name: Upload Slither SARIF
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: slither-sarif
          path: slither.sarif

      - name: Mythril quick scan
        run: |
          docker run --rm \
            -v "$PWD":/src \
            -w /src \
            mythril/myth:0.24.3 \
            analyze contracts/v2/modules/JobRegistryModule.sol \
              --execution-timeout 120 \
              --solc-args "--base-path . --include-path node_modules --allow-paths .,node_modules" \
              --solc-remaps "@openzeppelin=node_modules/@openzeppelin"

      - name: Generate SBOM (SPDX JSON)
        uses: anchore/sbom-action@v0.17.5
        with:
          path: .
          format: spdx-json
          output-file: reports/sbom/spdx.json

      - name: Compute SBOM digest (base64)
        if: startsWith(github.ref, 'refs/tags/')
        id: sbom_digest
        run: |
          python - <<'PY' >> "$GITHUB_OUTPUT"
import base64
import hashlib
from pathlib import Path

sbom_path = Path("reports/sbom/spdx.json")
digest = hashlib.sha256(sbom_path.read_bytes()).hexdigest()
subject_line = f"{digest} {sbom_path.as_posix()}\n"
print(f"base64_subjects={base64.b64encode(subject_line.encode()).decode()}")
PY

      - name: Upload security artefacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-artifacts
          path: |
            reports/license-summary.txt
            reports/sbom/spdx.json

  generate-provenance:
    needs: security-suite
    if: startsWith(github.ref, 'refs/tags/') && needs.security-suite.outputs.sbom-base64 != ''
    permissions:
      actions: read
      contents: read
      id-token: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    secrets: inherit
    with:
      base64-subjects: ${{ needs.security-suite.outputs.sbom-base64 }}
      provenance-name: sbom.provenance.intoto.jsonl
      upload-assets: false

  publish-provenance:
    needs: generate-provenance
    if: startsWith(github.ref, 'refs/tags/') && needs.generate-provenance.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Download provenance attestation
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.generate-provenance.outputs.provenance-name }}
          path: provenance

      - name: Upload provenance statement
        uses: actions/upload-artifact@v4
        with:
          name: provenance
          path: provenance/${{ needs.generate-provenance.outputs.provenance-name }}
