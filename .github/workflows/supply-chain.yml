name: supply-chain

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  workflow_dispatch:

jobs:
  enforce-digests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install PyYAML
        run: pip install --disable-pip-version-check pyyaml

      - name: Validate Helm image digests
        run: |
          python - <<'PY'
          import sys
          import yaml

          required_components = [
              "orchestrator",
              "bundler",
              "paymaster-supervisor",
              "attester",
          ]

          with open("deploy/helm/values.yaml", "r", encoding="utf-8") as handle:
              values = yaml.safe_load(handle)

          missing = []
          for component in required_components:
              image_cfg = values.get(component, {}).get("image", {})
              digest = image_cfg.get("digest") or values.get("global", {}).get("image", {}).get("digestOverrides", {}).get(component)
              tag = image_cfg.get("tag") or values.get("global", {}).get("image", {}).get("tag")

              if not digest and (not tag or tag == "latest"):
                  missing.append(component)

          if missing:
              sys.exit(f"Missing immutable image digests or pinned tags for: {', '.join(missing)}")
          PY

  build-attest:
    needs: enforce-digests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        network: [testnet, mainnet]
        component: [orchestrator, bundler, paymaster-supervisor, attester]
        include:
          - component: orchestrator
            context: packages/orchestrator
          - component: bundler
            context: services/bundler
          - component: paymaster-supervisor
            context: paymaster/supervisor
          - component: attester
            context: attestation/attester
    env:
      REGISTRY: ghcr.io/${{ github.repository_owner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve build context
        id: context
        run: |
          case "${{ matrix.component }}" in
            orchestrator)
              context="packages/orchestrator"
              ;;
            bundler)
              context="services/bundler"
              ;;
            paymaster-supervisor)
              context="paymaster/supervisor"
              ;;
            attester)
              context="attestation/attester"
              ;;
            *)
              context="."
              ;;
          esac
          if [ ! -d "$context" ]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            echo "context=." >> "$GITHUB_OUTPUT"
            echo "warning=Build context $context not found; skipping" >> "$GITHUB_OUTPUT"
          else
            dockerfile="$context/Dockerfile"
            if [ ! -f "$dockerfile" ]; then
              echo "skip=true" >> "$GITHUB_OUTPUT"
              echo "context=." >> "$GITHUB_OUTPUT"
              echo "warning=Dockerfile not found in $context; skipping" >> "$GITHUB_OUTPUT"
            else
              echo "skip=false" >> "$GITHUB_OUTPUT"
              echo "context=$context" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: steps.context.outputs.skip != 'true'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: steps.context.outputs.skip != 'true'

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: steps.context.outputs.skip != 'true'

      - name: Compute version metadata
        id: meta
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME}"
          else
            VERSION="${GITHUB_SHA::8}-${{ matrix.network }}"
          fi
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "ref=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"

      - name: Prepare image tags
        id: tags
        if: steps.context.outputs.skip != 'true'
        run: |
          IMAGE="${REGISTRY}/${{ matrix.component }}:${{ steps.meta.outputs.version }}"
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "digest_tag=${IMAGE}@sha256" >> "$GITHUB_OUTPUT"

      - name: Build image with SBOM
        id: build
        if: steps.context.outputs.skip != 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.context.outputs.context }}
          push: true
          provenance: true
          sbom: true
          tags: ${{ steps.tags.outputs.image }}
          build-args: |
            DEPLOY_NETWORK=${{ matrix.network }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export SBOM
        if: steps.context.outputs.skip != 'true'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.tags.outputs.image }}
          artifact-name: sbom-${{ matrix.component }}-${{ matrix.network }}.spdx.json

      - name: Install cosign
        if: steps.context.outputs.skip != 'true'
        uses: sigstore/cosign-installer@v3

      - name: Cosign sign image
        if: github.event_name != 'pull_request' && steps.context.outputs.skip != 'true'
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          cosign sign --yes ${{ steps.tags.outputs.image }}

      - name: Store digest
        if: steps.context.outputs.skip != 'true'
        run: |
          mkdir -p .artifacts
          echo "${{ steps.tags.outputs.image }}" >> .artifacts/images.txt

      - name: Upload image list
        if: steps.context.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: images-${{ matrix.component }}-${{ matrix.network }}
          path: .artifacts/images.txt

  update-helm-digests:
    needs: build-attest
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download image manifest list
        uses: actions/download-artifact@v4
        with:
          pattern: images-*
          path: .
          merge-multiple: true
        continue-on-error: true

      - name: Install tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y jq skopeo
          sudo curl -sSL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Pin image digests
        run: |
          if [ ! -f images.txt ]; then
            echo "images.txt not found; skipping digest pinning" >&2
            exit 0
          fi
          while read -r image; do
            component=$(basename "$image" | cut -d: -f1)
            digest=$(skopeo inspect docker://$image --no-tags | jq -r '.Digest')
            yq -i ".${component}.image.digest=\"${digest}\"" deploy/helm/values.yaml
          done < images.txt

      - name: Commit digest updates
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(helm): pin image digests"
          file_pattern: deploy/helm/values.yaml
