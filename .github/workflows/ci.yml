name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Minimal permissions
permissions:
  contents: read

# Avoid duplicate runs on force-push/sync
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# CI-wide environment defaults (safe for PRs)
env:
  NODE_VERSION: '20'
  COVERAGE_MIN: '90'
  # Keep these aligned with tests: PCT as WHOLE POINTS, windows in SECONDS
  ACCESS_CONTROL_PATHS: 'contracts/v2/admin,contracts/v2/governance'
  FEE_PCT: '2'                     # 2%
  BURN_PCT: '6'                    # 6%
  TREASURY: '0x1111111111111111111111111111111111111111'
  VALIDATORS_PER_JOB: '3'
  REQUIRED_APPROVALS: '3'          # Match validators for supermajority defaults in tests
  COMMIT_WINDOW_S: '1800'          # 30 minutes
  REVEAL_WINDOW_S: '1800'          # 30 minutes

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: |
            package-lock.json
            **/package-lock.json

      - name: Install dependencies
        run: npm ci

      # Deterministic constants build (CJS) + contracts compile
      - name: Compile (scripts & constants)
        run: |
          npx ts-node --compiler-options '{"module":"commonjs"}' scripts/generate-constants.ts
          npx hardhat compile

      # Keep build checks that already exist (do not change behavior)
      - name: Orchestrator tsc
        run: npx tsc -p apps/orchestrator/tsconfig.json

      - name: Webapp build
        run: npm --prefix apps/enterprise-portal run build

      # Full Node/TS + Hardhat test chain
      - name: npm test
        run: npm test

      # Persist coverage if generated by tests (best-effort, still enforced later)
      - name: Upload coverage artifact (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.sha }}
          path: coverage/**
          if-no-files-found: ignore

  foundry:
    name: Foundry
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Foundry tests
        run: forge test -vvvv --ffi --fuzz-runs 256 --match-contract 'CommitReveal|Stake|Fee|Slashing'

  coverage:
    name: Coverage thresholds
    # Must NOT be skippable on PRs; run regardless of other job outcomes
    if: ${{ always() }}
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: |
            package-lock.json
            **/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Compile (scripts & constants)
        run: |
          npx ts-node --compiler-options '{"module":"commonjs"}' scripts/generate-constants.ts
          npx hardhat compile

      # Generate lcov from the full npm test chain. Running here ensures independence from other jobs.
      - name: Generate coverage (lcov)
        run: npx c8 -o coverage --reporter=lcov --reporter=text-summary --all npm test

      - name: Upload lcov artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lcov-${{ github.sha }}
          path: coverage/lcov.info
          if-no-files-found: error

      # Enforce coverage gate with a robust lcov parser (no extra deps)
      - name: Enforce coverage >= ${{ env.COVERAGE_MIN }}%
        if: always()
        env:
          COVERAGE_MIN: ${{ env.COVERAGE_MIN }}
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const file = 'coverage/lcov.info';
          if (!fs.existsSync(file)) {
            console.error('coverage/lcov.info not found. Did tests run?');
            process.exit(1);
          }
          const txt = fs.readFileSync(file, 'utf8');
          // Prefer LF/LH; otherwise derive from DA lines
          let LF = 0, LH = 0, m;
          const lfRx = /^LF:(\d+)/gm, lhRx = /^LH:(\d+)/gm, daRx = /^DA:\d+,(\d+)/gm;
          while ((m = lfRx.exec(txt))) LF += +m[1];
          while ((m = lhRx.exec(txt))) LH += +m[1];
          if (!LF) { // derive from DA records
            for (const d of txt.matchAll(daRx)) { LF++; if (+d[1] > 0) LH++; }
          }
          const pct = LF ? (100 * LH / LF) : 0;
          const min = Number(process.env.COVERAGE_MIN || 90);
          console.log(`Lines hit: ${LH}/${LF} -> ${pct.toFixed(2)}% (min ${min}%)`);
          if (pct + 1e-9 < min) {
            console.error('Coverage below threshold.');
            process.exit(1);
          }
          NODE
