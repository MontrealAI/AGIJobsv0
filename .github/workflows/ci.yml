name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "**" ]

# Ensure only the latest push/PR run stays active.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  # Keep minimal; expand only if you later add security scans:
  # security-events: write

env:
  NODE_VERSION: "20.x"
  # ---- Protocol/test defaults expected by generate-constants & tests ----
  # IMPORTANT: provide PERCENT values as WHOLE PERCENT POINTS (not decimals)
  # to satisfy StakeManager percentage validations and event expectations.
  FEE_PCT: "2"             # 2% (NOT 0.02)
  BURN_PCT: "6"            # 6% (NOT 0.06)
  TREASURY: "0x1111111111111111111111111111111111111111"
  VALIDATORS_PER_JOB: "3"
  REQUIRED_APPROVALS: "3"
  # Use seconds to avoid ESM/dynamic-import issues in parse-duration:
  COMMIT_WINDOW: "1800"    # 30 min
  REVEAL_WINDOW: "1800"    # 30 min
  # Hardhat / repo-specific env seen in logs:
  ACCESS_CONTROL_PATHS: "contracts/v2/admin,contracts/v2/governance"
  COVERAGE_MIN: "90"

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # Keep compile explicit and identical to what the repo expects.
      # Using ts-node in CJS mode to avoid ESM loader cycles seen in logs.
      - name: Compile (scripts & constants)
        run: |
          npx ts-node --compiler-options '{"module":"commonjs"}' scripts/generate-constants.ts
          npx hardhat compile

      # Runs the full existing chain (node tests + hardhat tests).
      - name: Run full test suite
        run: npm test

      - name: Upload Node/ts test results (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: node-tests-output
          path: |
            apps/**/dist-test/**
            apps/**/test-output/**
            **/test-results.xml
          if-no-files-found: ignore

  foundry:
    name: Foundry
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Foundry toolchain
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Show versions
        run: |
          forge --version
          anvil --version
          cast --version

      # If your Foundry tests rely on npm deps (common in monorepos), install them.
      - name: Install npm deps (for shared toolchain/types)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - run: npm ci

      # Run targeted Foundry suites (as requested).
      - name: Run Foundry tests (fuzz & FFI)
        env:
          FOUNDRY_PROFILE: ci
        run: |
          forge test -vvvv --ffi --fuzz-runs 256 --match-contract 'CommitReveal|Stake|Fee|Slashing'

  coverage-thresholds:
    name: Coverage thresholds
    # Always execute this job on PRs (even if tests fail), and also on main
    if: |
      (github.event_name == 'pull_request') || (github.ref == 'refs/heads/main')
    runs-on: ubuntu-24.04
    needs:
      - tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # Generate coverage with solidity-coverage (produces coverage/lcov.info)
      # If you already have a script like "coverage": "hardhat coverage", call that instead.
      - name: Generate solidity coverage
        run: |
          npx hardhat coverage --temp artifacts-coverage
        env:
          # Ensure the same env constants used in tests are present here
          FEE_PCT: ${{ env.FEE_PCT }}
          BURN_PCT: ${{ env.BURN_PCT }}
          TREASURY: ${{ env.TREASURY }}
          VALIDATORS_PER_JOB: ${{ env.VALIDATORS_PER_JOB }}
          REQUIRED_APPROVALS: ${{ env.REQUIRED_APPROVALS }}
          COMMIT_WINDOW: ${{ env.COMMIT_WINDOW }}
          REVEAL_WINDOW: ${{ env.REVEAL_WINDOW }}
          ACCESS_CONTROL_PATHS: ${{ env.ACCESS_CONTROL_PATHS }}

      - name: Ensure coverage file exists
        run: |
          test -s coverage/lcov.info || { echo "❌ coverage/lcov.info not found"; exit 1; }

      - name: Install lcov
        run: |
          sudo apt-get update -y
          sudo apt-get install -y lcov

      - name: Summarize coverage and enforce threshold
        id: cov
        run: |
          SUMMARY=$(lcov --summary coverage/lcov.info)
          echo "$SUMMARY"
          # Extract the total line coverage percentage, e.g. "lines......: 92.3% (....)"
          PCT=$(echo "$SUMMARY" | awk '/lines/ {gsub("%","",$2); print $2; exit}')
          echo "total_lines_pct=$PCT" >> $GITHUB_OUTPUT
          echo "Coverage: $PCT% (min $COVERAGE_MIN%)"
          awk -v p="$PCT" -v m="${COVERAGE_MIN}" 'BEGIN{ if (p+0 < m+0) { exit 1 } }'

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: solidity-coverage
          path: coverage/
          if-no-files-found: error
