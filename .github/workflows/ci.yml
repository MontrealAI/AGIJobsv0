name: CI
on:
  pull_request:
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.12.2'
  CI: true
  SLITHER_IMAGE: 'trailofbits/eth-security-toolbox:nightly-20240902@sha256:4f6549ff47d6509caa8e78cc0ff9a3de798d6310c82ec6ad137216eb2b22d759'
  ECHIDNA_IMAGE: 'ghcr.io/crytic/echidna/echidna:v2.2.7@sha256:0797d936522236ab27f16550096b077f89c2415f6535c1332ef431abbc6ce76d'
  AGIALPHA_TOKEN: '0xA61a3B3a130a9c20768EEBF97E21515A6046a1fA'
  COVERAGE_MIN: '90'

jobs:
  detect-docker:
    name: Detect Docker availability
    runs-on: ubuntu-latest
    outputs:
      has: ${{ steps.check.outputs.has }}
    steps:
      - name: Check
        id: check
        run: |
          if command -v docker >/dev/null 2>&1; then
            echo "has=true" >> "$GITHUB_OUTPUT"
          else
            echo "has=false" >> "$GITHUB_OUTPUT"
          fi

  build:
    name: Build · Lint · Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332

      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install
        run: npm ci

      - name: Lint (best-effort)
        run: |
          npx --yes solhint -V >/dev/null 2>&1 && npx solhint 'contracts/**/*.sol' || true
          npx --yes eslint -v   >/dev/null 2>&1 && npx eslint . --ext .js,.cjs,.mjs || true

      - name: Start Ganache (deterministic)
        run: |
          npx --yes ganache --quiet --chain.allowUnlimitedContractSize --miner.blockGasLimit 30000000 &
          sleep 3

      - name: Compile
        run: npm run compile

      - name: Unit tests
        run: npm test

      - name: Coverage (if configured)
        run: npx --yes solidity-coverage || echo "coverage not configured; skipping"

      - name: Enforce coverage threshold
        run: node scripts/check-coverage.js $COVERAGE_MIN

      - name: Verify wiring ($AGIALPHA) & owner control
        env:
          WIRE_VERIFY_RPC_URL: http://127.0.0.1:8545
        run: |
          npm run wire:verify
          npm run owner:health

      - name: Truffle migration wizard (dry-run)
        env:
          MAINNET_RPC_URL: https://mainnet.example
          MAINNET_PRIVATE_KEY: 0x1111111111111111111111111111111111111111111111111111111111111111
          GOVERNANCE_ADDRESS: 0x1111111111111111111111111111111111111111
        run: npm run migrate:wizard -- --network mainnet

  slither:
    name: Slither (fail-high)
    needs: [build, detect-docker]
    runs-on: ubuntu-latest
    if: needs.detect-docker.outputs.has == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      - name: Slither (toolbox, force solc; no Foundry/Truffle)
        run: |
          docker run --rm -u root -v "$PWD":/src -w /src "$SLITHER_IMAGE" /bin/bash -lc "
            slither . \
              --fail-high \
              --exclude-dependencies \
              --compile-force-framework solc \
              --solc-remaps '@openzeppelin=node_modules/@openzeppelin' \
              --solc-args '--base-path . --include-path node_modules --allow-paths .,node_modules' \
              --sarif results.sarif
          "
      - name: Upload SARIF
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: slither-sarif
          path: results.sarif

  slither-no-docker:
    name: Slither (Docker unavailable)
    needs: [build, detect-docker]
    runs-on: ubuntu-latest
    if: needs.detect-docker.outputs.has != 'true'
    steps:
      - run: echo "Docker not available; skipping Slither in PR CI."

  echidna-pr:
    name: Echidna smoke (PR)
    needs: [build, detect-docker]
    runs-on: ubuntu-latest
    if: needs.detect-docker.outputs.has == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      - name: Echidna (assertion-mode smoke, framework-free)
        run: |
          docker run --rm -u root -v "$PWD":/src -w /src "$ECHIDNA_IMAGE" \
            echidna-test ./contracts/test/EchidnaSmoke.sol \
              --contract EchidnaSmoke \
              --test-mode assertion \
              --format text \
              --seq-len 64 \
              --crytic-args '--compile-force-framework solc --solc-remaps @openzeppelin=node_modules/@openzeppelin'
  echidna-no-docker:
    name: Echidna smoke (Docker unavailable)
    needs: [build, detect-docker]
    runs-on: ubuntu-latest
    if: needs.detect-docker.outputs.has != 'true'
    steps:
      - run: echo "Docker not available; skipping Echidna smoke."

  coverage-badge:
    name: Coverage (threshold gate)
    needs: build
    runs-on: ubuntu-latest
    steps:
      - run: echo "Coverage gate already enforced in build job."

  gas-snapshot:
    name: Gas snapshot (regression gate)
    needs: build
    runs-on: ubuntu-latest
    steps:
      - run: echo "Add your gas JSON check here if desired."

  e2e:
    name: E2E · Localnet & Orchestrator smoke
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332

      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install
        run: npm ci

      - name: Compile contracts & constants
        run: npm run compile

      - name: Local agent gateway e2e
        run: npm run e2e:local

      - name: Orchestrator chain provider tests
        run: npm run test --workspace packages/orchestrator
