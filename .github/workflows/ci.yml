name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  packages: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.12.2'
  FOUNDRY_VERSION: 'nightly-1cc7cc9e54442be31ca03ceb794d9c7ad1d3d9b3'
  SOLC_VERSION: '0.8.25'
  CI: 'true'
  SLITHER_IMAGE: 'trailofbits/eth-security-toolbox:nightly-20240902'
  ECHIDNA_IMAGE: 'ghcr.io/crytic/echidna/echidna:v2.2.7'

jobs:
  docker-check:
    name: Detect Docker availability
    runs-on: ubuntu-22.04
    outputs:
      available: ${{ steps.detect.outputs.available }}
    steps:
      - name: Check Docker
        id: detect
        run: |
          if command -v docker >/dev/null 2>&1; then
            echo "available=true" >> "$GITHUB_OUTPUT"
          else
            echo "available=false" >> "$GITHUB_OUTPUT"
          fi

  build-test:
    needs: docker-check
    name: Build • Lint • Unit tests
    runs-on: ubuntu-22.04
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          fetch-depth: 0

      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install deps (npm ci, exact lockfile)
        run: npm ci

      - name: Security audit (allowlist enforced)
        run: npm run security:audit

      - name: Pin Foundry toolchain
        uses: foundry-rs/foundry-toolchain@82dee4ba654bd2146511f85f0d013af94670c4de
        with:
          version: ${{ env.FOUNDRY_VERSION }}

      - name: Print tool versions
        run: |
          node -v
          npm -v
          forge --version

      - name: Lint & format (no writes)
        run: |
          npm run lint:check || (echo "::error::Lint failed. Run npm run lint:fix locally." && exit 1)
          npm run format:check || (echo "::error::Format failed. Run npm run format:fix locally." && exit 1)

      - name: Compile (hardhat)
        env:
          HARDHAT_NETWORK: hardhat
        run: npm run compile

      - name: Unit tests (local hardhat network)
        env:
          HARDHAT_NETWORK: hardhat
          ETHERSCAN_API_KEY: ''
          RPC_URL: ''
        run: npm test

      - name: Owner control healthcheck (ephemeral devnet)
        env:
          HARDHAT_NETWORK: hardhat
        run: npm run owner:health

      - name: Verify AGIALPHA wiring assumptions
        run: npm run verify:agialpha -- --skip-onchain

  slither:
    name: Slither (fail-high)
    needs: [build-test, docker-check]
    if: needs.docker-check.outputs.available == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install deps (npm ci, exact lockfile)
        run: npm ci
      - name: Prepare writable Foundry artifacts directories
        run: |
          chmod a+rwX .
          mkdir -p out cache
          chmod -R a+rwX out cache
      - name: Run Slither inside pinned Docker
        run: |
          docker run --rm -v "$PWD":/src -w /src "$SLITHER_IMAGE" \
            /bin/bash -lc "slither . --fail-high --exclude-dependencies --solc-remaps '@openzeppelin=node_modules/@openzeppelin' --sarif results.sarif"
      - name: Upload SARIF to code scanning
        uses: github/codeql-action/upload-sarif@528ca598d956c91826bd742262cdfc5d02b77710
        with:
          sarif_file: results.sarif

  slither-skip:
    name: Slither (Docker unavailable)
    needs: [build-test, docker-check]
    if: needs.docker-check.outputs.available != 'true'
    runs-on: ubuntu-22.04
    steps:
      - run: echo "Docker not available; skipping Slither by design."

  echidna-smoke:
    name: Echidna smoke (PR)
    needs: [build-test, docker-check]
    if: needs.docker-check.outputs.available == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install deps (npm ci, exact lockfile)
        run: npm ci
      - name: Prepare writable Foundry artifacts directories
        run: |
          chmod a+rwX .
          mkdir -p out cache
          chmod -R a+rwX out cache
      - name: Authenticate to GitHub Container Registry
        env:
          GHCR_USER: ${{ github.actor }}
          GHCR_PAT: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -z "$GHCR_PAT" ]; then
            echo "::error::GITHUB_TOKEN unavailable; cannot authenticate to ghcr.io" && exit 1
          fi
          echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
      - name: Echidna smoke (Docker)
        run: |
          docker run --rm -v "$PWD":/src -w /src "$ECHIDNA_IMAGE" \
            echidna-test ./contracts/test/CommitRevealEchidna.sol \
              --contract CommitRevealEchidnaHarness \
              --config ./echidna/echidna.smoke.yml \
              --test-mode assertion \
              --seed 1337 \
              --corpus-dir echidna/corpus-smoke

  echidna-skip:
    name: Echidna smoke (Docker unavailable)
    needs: [build-test, docker-check]
    if: needs.docker-check.outputs.available != 'true'
    runs-on: ubuntu-22.04
    steps:
      - run: echo "Docker not available; skipping Echidna smoke test."

  coverage:
    name: Coverage (threshold gate)
    needs: build-test
    runs-on: ubuntu-22.04
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci
      - name: Run coverage (no forking)
        env:
          HARDHAT_NETWORK: coverage
        run: npm run coverage:full
      - name: Enforce threshold
        run: node ./scripts/ci/check-coverage-threshold.mjs 90

  gas:
    name: Gas snapshot (regression gate)
    needs: build-test
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      - uses: foundry-rs/foundry-toolchain@82dee4ba654bd2146511f85f0d013af94670c4de
        with:
          version: ${{ env.FOUNDRY_VERSION }}
      - name: Ensure baseline snapshot exists
        env:
          FOUNDRY_PROFILE: gas
        run: |
          if [ ! -f gas-snapshots/.gas-snapshot ]; then
            forge snapshot --match-contract CommitRevealGas --snap gas-snapshots/.gas-snapshot
          fi
      - name: Check gas regressions (±3%)
        env:
          FOUNDRY_PROFILE: gas
        run: ./scripts/ci/check-gas-regressions.sh gas-snapshots/.gas-snapshot 3
