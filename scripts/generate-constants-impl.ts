import fs from 'node:fs';
import path from 'node:path';

import { ethers } from 'ethers';

import { loadTokenConfig } from './config';

type PositiveIntegerOptions = {
  minimum?: number;
};

type AddressOptions = {
  allowZero?: boolean;
};

let networkArg: string | undefined;
for (let i = 0; i < process.argv.length; i++) {
  const arg = process.argv[i];
  if (arg === '--network' && i + 1 < process.argv.length) {
    networkArg = process.argv[i + 1];
    break;
  }
  if (arg.startsWith('--network=')) {
    networkArg = arg.slice('--network='.length);
    break;
  }
}

function assertAddress(value: string, label: string, options: AddressOptions = {}) {
  const normalised = ethers.getAddress(value);
  if (!options.allowZero && normalised === ethers.ZeroAddress) {
    throw new Error(`${label} cannot be the zero address`);
  }
  return normalised;
}

function assertSymbol(value: string, label: string): string {
  const trimmed = value?.trim?.();
  if (!trimmed) {
    throw new Error(`${label} is required`);
  }
  if (trimmed.length > 32) {
    throw new Error(`${label} must be 32 characters or fewer`);
  }
  return trimmed;
}

function assertName(value: string, label: string): string {
  const trimmed = value?.trim?.();
  if (!trimmed) {
    throw new Error(`${label} is required`);
  }
  if (trimmed.length > 64) {
    throw new Error(`${label} must be 64 characters or fewer`);
  }
  return trimmed;
}

function assertDecimals(value: number): number {
  if (!Number.isInteger(value)) {
    throw new Error('decimals must be an integer');
  }
  if (value < 0 || value > 255) {
    throw new Error('decimals must be between 0 and 255');
  }
  return value;
}

function assertPositiveInteger(
  value: string,
  label: string,
  options: PositiveIntegerOptions = {}
): number {
  const { minimum = 1 } = options;
  if (!/^\d+$/.test(value)) {
    throw new Error(`${label} must be an integer`);
  }
  const numeric = Number.parseInt(value, 10);
  if (!Number.isFinite(numeric) || numeric < minimum) {
    throw new Error(`${label} must be >= ${minimum}`);
  }
  return numeric;
}

function parseWholePointPercentage(
  raw: string | undefined,
  label: string,
  fallback: number
): number {
  const input = raw?.trim();
  const source = input && input.length > 0 ? input : `${fallback}`;
  const numeric = Number.parseInt(source, 10);
  if (!Number.isFinite(numeric)) {
    throw new Error(`${label} must be an integer percentage`);
  }
  if (numeric <= 0 || numeric > 100) {
    throw new Error(`${label} must be between 1 and 100 (inclusive)`);
  }
  return numeric;
}

function parseWindowSeconds(
  raw: string | undefined,
  label: string,
  fallback: number
): number {
  const input = raw?.trim();
  const source = input && input.length > 0 ? input : `${fallback}`;
  const numeric = Number.parseInt(source, 10);
  if (!Number.isFinite(numeric)) {
    throw new Error(`${label} must be an integer number of seconds`);
  }
  if (numeric <= 0) {
    throw new Error(`${label} must be greater than zero seconds`);
  }
  return numeric;
}

export async function main() {
  const { config } = loadTokenConfig({ network: networkArg });

  const address = assertAddress(config.address, 'AGIALPHA address');
  const decimals = assertDecimals(config.decimals);
  const burnAddress = assertAddress(
    config.burnAddress ?? ethers.ZeroAddress,
    'burn address',
    { allowZero: true }
  );
  const symbol = assertSymbol(config.symbol, 'AGIALPHA symbol');
  const name = assertName(config.name, 'AGIALPHA name');

  const feePct = parseWholePointPercentage(process.env.FEE_PCT, 'FEE_PCT', 2);
  const burnPct = parseWholePointPercentage(process.env.BURN_PCT, 'BURN_PCT', 6);
  const treasury = assertAddress(
    process.env.TREASURY ?? '0x1111111111111111111111111111111111111111',
    'TREASURY'
  );
  const validatorsPerJob = assertPositiveInteger(
    (process.env.VALIDATORS_PER_JOB ?? '3').trim(),
    'VALIDATORS_PER_JOB'
  );
  const requiredApprovals = assertPositiveInteger(
    (process.env.REQUIRED_APPROVALS ?? `${validatorsPerJob}`).trim(),
    'REQUIRED_APPROVALS'
  );
  if (requiredApprovals > validatorsPerJob) {
    throw new Error('REQUIRED_APPROVALS cannot exceed VALIDATORS_PER_JOB');
  }
  const commitWindowS = parseWindowSeconds(
    process.env.COMMIT_WINDOW_S,
    'COMMIT_WINDOW_S',
    1800
  );
  const revealWindowS = parseWindowSeconds(
    process.env.REVEAL_WINDOW_S,
    'REVEAL_WINDOW_S',
    1800
  );

  const scale = BigInt(10) ** BigInt(decimals);

  const content = `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

// Shared AGI Jobs v2 constants.
// @dev Auto-generated by scripts/generate-constants.ts
// Canonical $AGIALPHA token on Ethereum mainnet.
address constant AGIALPHA = ${address};

// Standard decimals for $AGIALPHA.
uint8 constant AGIALPHA_DECIMALS = ${decimals};

// ERC-20 metadata for $AGIALPHA.
string constant AGIALPHA_SYMBOL = ${JSON.stringify(symbol)};
string constant AGIALPHA_NAME = ${JSON.stringify(name)};

// Base unit scaling factor for $AGIALPHA (10 ** decimals).
uint256 constant TOKEN_SCALE = ${scale};

// Address used for burning tokens.
address constant BURN_ADDRESS = ${burnAddress};
`;
  const outPath = path.join(__dirname, '..', 'contracts', 'v2', 'Constants.sol');
  fs.writeFileSync(outPath, content);
  console.log(`Generated ${outPath}`);

  const generatedDir = path.join(__dirname, 'generated');
  fs.mkdirSync(generatedDir, { recursive: true });

  const protocolDefaults = {
    feePct,
    burnPct,
    validatorsPerJob,
    requiredApprovals,
    commitWindowS,
    revealWindowS,
    treasury,
  } as const;

  const generatedTs = `// Auto-generated by scripts/generate-constants.ts
// Do not edit manually.

export interface ProtocolDefaults {
  feePct: number;
  burnPct: number;
  validatorsPerJob: number;
  requiredApprovals: number;
  commitWindowS: number;
  revealWindowS: number;
  treasury: string;
}

export const PROTOCOL_DEFAULTS: ProtocolDefaults = ${JSON.stringify(
    protocolDefaults,
    null,
    2
  )} as const;
`;
  const generatedTsPath = path.join(generatedDir, 'protocol-defaults.ts');
  fs.writeFileSync(generatedTsPath, generatedTs);
  console.log(`Generated ${generatedTsPath}`);

  const generatedJsonPath = path.join(
    __dirname,
    '..',
    'deployment-config',
    'generated'
  );
  fs.mkdirSync(generatedJsonPath, { recursive: true });
  const protocolDefaultsJsonPath = path.join(
    generatedJsonPath,
    'protocol-defaults.json'
  );
  fs.writeFileSync(
    protocolDefaultsJsonPath,
    `${JSON.stringify(protocolDefaults, null, 2)}\n`
  );
  console.log(`Generated ${protocolDefaultsJsonPath}`);
}
